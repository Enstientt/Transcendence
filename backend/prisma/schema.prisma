// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  intraId        String    @unique @id
  fullname       String    @unique
  login          String    @unique
  email          String    @unique
  Avatar         String?
  isRegistred    Boolean   @default(false)
  isTfaEnabled   Boolean   @default(false)
  tfa            Tfa?
  friends        Friend[]  @relation("userFriends")
  user           Friend[]  @relation("friendsUser") 
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  privateRooms             PrivateRoom[]
}

model Message {
  id             Int       @id @default(autoincrement())
  sender         String
  recipient      String
  content        String
  createdAt      DateTime  @default(now())
  senderUser     User      @relation("SentMessages", fields: [sender], references: [intraId])
  recipientUser  User      @relation("ReceivedMessages", fields: [recipient], references: [intraId])
  PrivateRoomName    String
  PrivateRoom       PrivateRoom[]
}

model PrivateRoom{
  id            Int       @id @default(autoincrement())
  name         String     @unique
  participantsIds String[]
  participants User[]
  messages     Message[]
  createdAt      DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}
model Tfa {
  user           User      @relation(fields: [intraId], references: [intraId])
  intraId        String    @unique
  otp            String    @unique
  created_at     DateTime  @default(now())
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Friend {
  friendshipStatus FriendStatus
  user             User         @relation("userFriends", fields: [userId], references: [intraId])
  userId           String
  friend           User         @relation("friendsUser", fields: [friendId], references: [intraId])
  friendId         String
  created_at       DateTime     @default(now())
  @@unique([userId, friendId], name: "unique_user_friend")
}
