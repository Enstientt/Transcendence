// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  intraId      String         @unique
  fullname     String         @unique
  login        String         @unique
  email        String         @unique
  Avatar       String?
  password     String?
  isRegistred  Boolean        @default(false)
  isTfaEnabled Boolean        @default(false)
  status       Status         @default(ONLINE)
  tfa          Tfa?
  friends      Friend[]       @relation("userFriends")
  user         Friend[]       @relation("friendsUser")
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  // wonMatches   MatchHistory[] @relation("userWins")
  // lostMatches  MatchHistory[] @relation("userLosses")
}

enum MatchOutcome {
  WIN
  LOSS
  UNDEFINED
}

// model MatchHistory {
//   id        Int          @id @default(autoincrement())
//   winner    User?        @relation(name: "userWins", fields: [winnerId], references: [intraId])
//   winnerId  String? // Made nullable
//   loser     User?        @relation(name: "userLosses", fields: [loserId], references: [intraId])
//   loserId   String? // Made nullable
//   score     String // Format can be "3-1", "2-0", etc.
//   outcome   MatchOutcome
//   matchDate DateTime     @default(now())

//   @@unique([winnerId, loserId, matchDate], name: "unique_match")
// }

model Tfa {
  user       User     @relation(fields: [intraId], references: [intraId])
  intraId    String   @unique
  otp        String   @unique
  created_at DateTime @default(now())
}

enum Status {
  ONLINE
  OFFLINE
  INGAME
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Friend {
  friendshipStatus FriendStatus
  user             User         @relation("userFriends", fields: [userId], references: [intraId])
  userId           String
  friend           User         @relation("friendsUser", fields: [friendId], references: [intraId])
  friendId         String
  created_at       DateTime     @default(now())

  @@unique([userId, friendId], name: "unique_user_friend")
}
